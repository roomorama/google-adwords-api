#!/usr/bin/ruby
# This is auto-generated code, changes will be overwritten.
# Copyright:: Copyright 2011, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License,Version 2.0 (the "License").
#
# Code generated by AdsCommon library 0.5.2 on 2011-10-20 20:35:52.

require 'adwords_api/errors'

module AdwordsApi; module V201101; module MediaService
  class MediaServiceRegistry
    MEDIASERVICE_METHODS = {:upload=>{:input=>[{:type=>"Media", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:media}], :output=>{:fields=>[{:type=>"Media", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:rval}], :name=>"upload_response"}}, :get=>{:input=>[{:type=>"Selector", :max_occurs=>1, :min_occurs=>0, :name=>:service_selector}], :output=>{:fields=>[{:type=>"MediaPage", :max_occurs=>1, :min_occurs=>0, :name=>:rval}], :name=>"get_response"}}}
    MEDIASERVICE_TYPES = {:Selector=>{:fields=>[{:type=>"string", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:fields}, {:type=>"Predicate", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:predicates}, {:type=>"DateRange", :max_occurs=>1, :min_occurs=>0, :name=>:date_range}, {:type=>"OrderBy", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:ordering}, {:type=>"Paging", :max_occurs=>1, :min_occurs=>0, :name=>:paging}]}, :DateRange=>{:fields=>[{:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:min}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:max}]}, :Dimensions=>{:fields=>[{:type=>"int", :max_occurs=>1, :min_occurs=>0, :name=>:width}, {:type=>"int", :max_occurs=>1, :min_occurs=>0, :name=>:height}]}, :Media=>{:fields=>[{:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:media_id}, {:type=>"Media.MediaType", :max_occurs=>1, :min_occurs=>0, :name=>:type}, {:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:reference_id}, {:type=>"Media_Size_DimensionsMapEntry", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:dimensions}, {:type=>"Media_Size_StringMapEntry", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:urls}, {:type=>"Media.MimeType", :max_occurs=>1, :min_occurs=>0, :name=>:mime_type}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:source_url}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:name}, {:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:file_size}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:creation_time}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:media_type}]}, :Image=>{:fields=>[{:type=>"base64Binary", :max_occurs=>1, :min_occurs=>0, :name=>:data}], :base=>"Media"}, :SoapHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:auth_token}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:client_customer_id}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:client_email}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:developer_token}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:user_agent}, {:type=>"boolean", :max_occurs=>1, :min_occurs=>0, :name=>:validate_only}, {:type=>"boolean", :max_occurs=>1, :min_occurs=>0, :name=>:partial_failure}]}, :OrderBy=>{:fields=>[{:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:field}, {:type=>"SortOrder", :max_occurs=>1, :min_occurs=>0, :name=>:sort_order}]}, :EntityNotFound=>{:fields=>[{:type=>"EntityNotFound.Reason", :max_occurs=>1, :min_occurs=>0, :name=>:reason}], :base=>"ApiError"}, :OperationAccessDenied=>{:fields=>[{:type=>"OperationAccessDenied.Reason", :max_occurs=>1, :min_occurs=>0, :name=>:reason}], :base=>"ApiError"}, :Media_Size_DimensionsMapEntry=>{:fields=>[{:type=>"Media.Size", :max_occurs=>1, :min_occurs=>0, :name=>:key}, {:type=>"Dimensions", :max_occurs=>1, :min_occurs=>0, :name=>:value}]}, :SoapResponseHeader=>{:fields=>[{:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:request_id}, {:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:operations}, {:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:response_time}, {:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:units}]}, :Paging=>{:fields=>[{:type=>"int", :max_occurs=>1, :min_occurs=>0, :name=>:start_index}, {:type=>"int", :max_occurs=>1, :min_occurs=>0, :name=>:number_results}]}, :Media_Size_StringMapEntry=>{:fields=>[{:type=>"Media.Size", :max_occurs=>1, :min_occurs=>0, :name=>:key}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:value}]}, :MediaPage=>{:fields=>[{:type=>"Media", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:entries}, {:type=>"int", :max_occurs=>1, :min_occurs=>0, :name=>:total_num_entries}]}, :Video=>{:fields=>[{:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:duration_millis}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:streaming_url}, {:type=>"boolean", :max_occurs=>1, :min_occurs=>0, :name=>:ready_to_play_on_the_web}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:industry_standard_commercial_identifier}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:advertising_id}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:you_tube_video_id_string}], :base=>"Media"}, :Audio=>{:fields=>[{:type=>"long", :max_occurs=>1, :min_occurs=>0, :name=>:duration_millis}, {:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:streaming_url}, {:type=>"boolean", :max_occurs=>1, :min_occurs=>0, :name=>:ready_to_play_on_the_web}], :base=>"Media"}, :Predicate=>{:fields=>[{:type=>"string", :max_occurs=>1, :min_occurs=>0, :name=>:field}, {:type=>"Predicate.Operator", :max_occurs=>1, :min_occurs=>0, :name=>:operator}, {:type=>"string", :max_occurs=>:unbounded, :min_occurs=>0, :name=>:values}]}}
    MEDIASERVICE_NAMESPACES = []

    def self.get_method_signature(method_name)
      return MEDIASERVICE_METHODS[method_name.to_sym]
    end

    def self.get_type_signature(type_name)
      return MEDIASERVICE_TYPES[type_name.to_sym]
    end

    def self.get_namespace(index)
      return MEDIASERVICE_NAMESPACES[index]
    end
  end

  # Base class for exceptions.
  class ApplicationException < AdwordsApi::Errors::ApiException
    attr_reader :message  # string
    attr_reader :application_exception_type  # string
  end

  # Exception class for holding a list of service errors.
  class ApiException < ApplicationException
    attr_reader :errors  # ApiError
    def initialize(exception_fault)
      @array_fields ||= []
      @array_fields << 'errors'
      super(exception_fault)
    end
  end
end; end; end
